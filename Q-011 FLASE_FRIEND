FLASE_FRIENDSProblem Statement:
After getting a gold medal, Fabia has become a celebrity at her university, and her social media profile is full of friend requests. Being the friendly ,she has has accepted all the requests.

Now her BFF, Mike is jealous of all the attention she is getting from others, so he asks her to delete some of the guys from her friend list.

To avoid a 'scene', Fabia decides to remove some friends from her friend list, since she knows the popularity of each of the friend she has, she uses the following algorithm to delete a friend.

Algorithm Delete(Friend):
DeleteFriend=false
for i = 1 to Friend.length-1
if (Friend[i].popularity < Friend[i+1].popularity)
delete i th friend
DeleteFriend=true
break
if(DeleteFriend == false)
delete the last friend

Input:
First line contains T number of test cases. First line of each test case contains N, the number of friends Fabia currently has and K ,the number of friends she decides to delete. Next lines contains popularity of her friends separated by space.

Output:
For each test case print N-K numbers which represent popularity of Fabia friend's after deleting K friends.

Constraints:
1<=T<=1000
1<=N<=100000
0<=K< N
0<=popularity_of_friend<=100

Time Limit:
1 sec

Example 1:
Input
3
3 1
3 100 1
5 2
19 12 3 4 17
5 3
23 45 11 77 18

Output

100 1
19 12 17
77 18

#CODE

#include<bits/stdc++.h>
using namespace std;
#define mfor(i,n) for(int i=0;i<n;i++)
#define LL long long
#define vi vector<int>
#define pb push_back
#define myfor(i,a,b) for(i=a;i<=b;i++)
#define IS_ODD( num )   ((num) & 1)
#define IS_EVEN( num )  (!IS_ODD( (num) ))
#define mod %
int compare (const void * a, const void * b)
{

 return *(int*)a-*(int*)b;
}

/*-----------------------------------------------*/
int main()
{

 int t,n,k,a[100000+1],ans;
 cin>>t;
 cout<<endl;
 while(t--)
 {
  cin>>n>>k;
  ans=0; 
  mfor(i,n)
   cin>>a[i];

  mfor(i,n-1)
  {
   int tmp=i-1;
   if(a[i]<a[i+1])
   {

    a[i]=INT_MIN;
    ++ans;
    if(ans==k)
    {
     break;
    
    }
    else
    {
		
     while(tmp>=0)
     {
      if(a[tmp]==INT_MIN)
      {
      --tmp;
      continue;
      }

      if(a[tmp]<a[i+1])
      {
       a[tmp]=INT_MIN;
       ++ans;
       if(ans==k)
       {
        i=n+1;
        break;
       }
      }
      else
      {
      break;
      }

      --tmp;
     }
    }
   }
  }
  int p=0;
  mfor(i,n-(k-ans))
  {
   if(a[i]!=INT_MIN)
   {
    cout<<a[i];
    if(p!=k)
       cout<<" ";
       ++p;
   }
  }
  cout<<endl;
 }
}

