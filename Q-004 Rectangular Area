RECTANGULAR_AREAProblem Statement:
Tanya has to solve a problem. She has to find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. Assume that all bars have same width of size 1 unit. Help Tanya!

Input:
The first line contains an integer 'T' denoting the total number of test cases. T test-cases follow. In each test cases, the first line contains an integer 'N' denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array. The elements of the array represents the height of the bars.

Output:
For each test-case, in a separate line, the maximum rectangular area possible from the contiguous bars.

Constraints:
1 <= T <= 100
1 <= N <= 10^3
1 <= A[i] <= 10^5


Time Limit:
1 sec

Example 1:
Input
1
7
6 2 5 4 5 1 6

Output

12

#CODE

#One Test Case Failed

 #include<bits/stdc++.h> 
using namespace std; 


int getMaxArea(vector<int> hist, int n) 
{ 
	stack<int> s; 

	int max_area = 0; // Initialize max area 
	int tp; // To store top of stack 
	int area_with_top; 
	int i = 0; 
	while (i < n) 
	{
		if (s.empty() || hist[s.top()] <= hist[i]) 
			s.push(i++); 
 
		else
		{ 
			tp = s.top(); // store the top index 
			s.pop(); 
			area_with_top = hist[tp] * (s.empty() ? i : 
								i - s.top() - 1); 

			// update max area, if needed 
			if (max_area < area_with_top) 
				max_area = area_with_top; 
		} 
	} 
	while (s.empty() == false) 
	{ 
		tp = s.top(); 
		s.pop(); 
		area_with_top = hist[tp] * (s.empty() ? i : 
								i - s.top() - 1); 

		if (max_area < area_with_top) 
			max_area = area_with_top; 
	} 

	return max_area; 
}  
int main() 
{ 	
	vector <int> arr;
	int n ,ele,size;
	cin>>n;
	for(int i=0;i<n;i++){
		cin>>size;
		for(int j=0;j<size;j++){
			cin>>ele;
			arr.push_back(ele);
		}
		cout << getMaxArea(arr, size)<<endl; 
	}
		
	
	return 0; 
}  
